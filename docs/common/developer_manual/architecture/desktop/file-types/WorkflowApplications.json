
{
  "DefaultValues": {
      "workflowInput": "scInput.json",
      "filenameAIM": "AIM.json",
      "filenameEVENT": "EVENT.json",
      "filenameSAM": "SAM.json",
      "filenameEDP": "EDP.json",
      "filenameSIM": "SIM.json",
      "driverFile": "driver",
      "filenameDL": "AIM.json",
      "workflowOutput": "EDP.json"
  },
  "AssetsApplications": {
    "API": {
      "Inputs": [
      ],
      "Outputs": [
        {
          "id": "assetFile",
          "type": "string",
          "description": "name of JSON file containing an array of id,filename pairs. For each asset id the aplication creates a AIM file with name filename",
          "default": "assetsFile.json"
        }
      ]
    },
    "Applications": [
      {
        "Name": "GenericAimDatabase",
          "ExecutablePath": "applications/createAIM/genericAimDatabase/GenericAimDatabase",
        "ApplicationSpecificInputs": [
          {
            "id": "Min",
            "type": "int",
            "description": "min id of asset to obtain AIM for"
          },
          {
            "id": "Max",
            "type": "int",
            "description": "max id of asset to obtain AIM for"
          },
          {
            "id": "assetSourceFile",
            "type": "path",
            "description": "path to asset file"
          },
          {
            "id": "config",
            "type": "path",
            "description": "path to asset config file"
          }
        ]
      },
      {
        "Name": "GeoJSON_to_AIM",
          "ExecutablePath": "applications/createAIM/GeoJSON_to_AIM/GeoJSON_to_AIM.py",
        "ApplicationSpecificInputs": [
          {
            "id": "Min",
            "type": "int",
            "description": "min id of asset to obtain AIM for"
          },
          {
            "id": "Max",
            "type": "int",
            "description": "max id of asset to obtain AIM for"
          },
          {
            "id": "assetSourceFile",
            "type": "path",
            "description": "path to asset database file"
          },
          {
            "id": "configFile",
            "type": "path",
            "description": "path to workflow config file"
          }
        ]
      },
      {
        "Name": "GEOJSON_TO_ASSET",
          "ExecutablePath": "applications/createAIM/GeoJSON_to_ASSET/GeoJSON_to_ASSET.py",
        "ApplicationSpecificInputs": [
          {
            "id": "assetFile",
            "type": "path",
            "description": "path to asset database file"
          },
          {
            "id": "assetType",
            "type": "string",
            "description": "name of the asset type e.g., Building, Transportation Network"
          },
          {
            "id": "inputJsonFile",
            "type": "path",
            "description": "path to the rWHALE.json"
          }
        ]
      },
	  {
        "Name": "INP_FILE",
          "ExecutablePath": "applications/createAIM/INP_FILE/INP_FILE.py",
        "ApplicationSpecificInputs": [
          {
            "id": "assetFile",
            "type": "path",
            "description": "path to asset database file"
          },
          {
            "id": "assetType",
            "type": "string",
            "description": "name of the asset type e.g., Building, Transportation Network"
          },
          {
            "id": "inputJsonFile",
            "type": "path",
            "description": "path to the rWHALE.json"
          }
        ]
      },
      {
        "Name": "CSV_to_AIM",
        "ExecutablePath": "applications/createAIM/CSV_to_AIM/CSV_to_AIM.py",  
        "RunsParallel": true,   
        "ApplicationSpecificInputs": [
          {
            "id": "Min",
            "type": "int",
            "description": "min id of asset to obtain AIM for"
          },
          {
            "id": "Max",
            "type": "int",
            "description": "max id of asset to obtain AIM for"
          },
          {
            "id": "filter",
            "type": "string",
            "description": "string with the asset ids to run"
          },
          {
            "id": "assetSourceFile",
            "type": "path",
            "description": "path to asset database file"
          }
        ]
      },
      {
        "Name": "GIS_to_AIM",
        "ExecutablePath": "applications/createAIM/CSV_to_AIM/CSV_to_AIM.py",
        "ApplicationSpecificInputs": [
          {
            "id": "Min",
            "type": "int",
            "description": "min id of asset to obtain AIM for",
            "default": 1
          },
          {
            "id": "Max",
            "type": "int",
            "description": "max id of asset to obtain AIM for",
            "default": 10
          },
          {
            "id": "filter",
            "type": "string",
            "description": "string with the asset ids to run",
            "default": ""
          },
          {
            "id": "assetSourceFile",
            "type": "path",
            "description": "path to asset database file",
            "default": ""
          }
        ]
      },
      {
        "Name": "CSV_to_WATERNETWORK",
        "ExecutablePath": null,
        "ApplicationSpecificInputs": [
          {
            "id": "WaterNetworkNodes",
            "type": "json",
            "description": "water network node information"
          },
          {
            "id": "WaterNetworkPipelines",
            "type": "json",
            "description": "water network node information"
          }
        ]
      },
      {
        "Name": "GIS_to_WATERNETWORK",
        "ExecutablePath": null,
        "ApplicationSpecificInputs": [
          {
            "id": "WaterNetworkNodes",
            "type": "json",
            "description": "water network node information"
          },
          {
            "id": "WaterNetworkPipelines",
            "type": "json",
            "description": "water network node information"
          }
        ]
      },
      {
        "Name": "JSON_to_TRANSPORTNETWORK",
        "ExecutablePath": "modules/createAIM/JSON_to_AIM/JSON_to_AIM_transport.py",
        "ApplicationSpecificInputs": [
          {
            "id": "assetSourceFile",
            "type": "path",
            "description": "path to asset database file"
          },
          {
            "id": "bridgesFilter",
            "type": "string",
            "description": "Filter applied to select a subset of bridges from the inventory"
          },
          {
            "id": "tunnelsFilter",
            "type": "string",
            "description": "Filter applied to select a subset of tunnels from the inventory"
          },
          {
            "id": "roadsFilter",
            "type": "string",
            "description": "Filter applied to select a subset of roads from the inventory"
          },
          {
            "id": "roadSegLength",
            "type": "float",
            "description": "Maximum length (m) of road segments in the created AIM files",
            "default": 100
          }
        ]
      }
  ]
  },
  "RegionalEventApplications": {
    "API": {
       "Inputs": [
        {
          "id": "input",
          "type": "path",
          "description": "Name of JSON input file",
          "default": "inputRWHALE.json"
        }
      ],
      "Outputs": [
      ]
    },
    "Applications":[
      {
        "Name": "DummyEventApp",
        "ExecutablePath": "applications/performRegionalEventSimulation/DummyEventApp/DEA.py",
        "ApplicationSpecificInputs": [
          {
            "id": "appSpecInput1",
            "type": "string",
            "description": "Description..."
          },
          {
            "id": "appSpecInput2",
            "type": "int",
            "description": "Description..."
          }
        ]
      },
      {
        "Name": "UserInputGM",
        "ExecutablePath": null,
        "ApplicationSpecificInputs": [
        ]
      },
      {
        "Name": "EQSS",
        "ExecutablePath": null,
        "ApplicationSpecificInputs": [
        ]
      },
      {
        "Name": "UserInputShakeMap",
        "ExecutablePath": null,
        "ApplicationSpecificInputs": [
        ]
      },
      {
        "Name": "UserInputHurricane",
        "ExecutablePath": null,
        "ApplicationSpecificInputs": [
        ]
      },
      {
        "Name": "UserInputRasterHazard",
        "ExecutablePath": null,
        "ApplicationSpecificInputs": [
        ]
      },
      {
        "Name": "RegionalSiteResponse",
        "ExecutablePath": "applications/Workflow/siteResponseWHALE.py",
        "RunsParallel": true,   
        "ApplicationSpecificInputs": [
        ]
      }
    ]
  },
  "RegionalMappingApplications": {
    "API": {
      "Inputs":[
        {
          "id": "assetFile",
          "type": "path",
          "description": "Name of JSON file containing an array of id,filename pairs. For each asset id the aplication creates a AIM file with name filename",
          "default": "assets.json"
        }
      ],
      "Outputs":[
      ]
    },
    "Applications": [
      {
        "Name": "NearestNeighborEvents",
        "ExecutablePath": "applications/performRegionalMapping/NearestNeighborEvents/NNE.py",
  "RunsParallel": true,
        "ApplicationSpecificInputs": [
          {
            "id": "filenameEVENTgrid",
            "type": "path",
            "description": "Path to file containing location information on each event file"
          },
          {
            "id": "samples",
            "type": "int",
            "description": "Number of event samples to use (interesting when using more than one neighbors)"
          },
          {
            "id": "neighbors",
            "type": "int",
            "description": "Number of neighbors to consider for each asset."
          },
          {
            "id": "filter_label",
            "type": "string",
            "description": "Custom label to use for pre-selection of grid points"
          },
          {
            "id": "seed",
            "type": "int",
            "description": "Seed for the random generator"
          }
        ]
      },
      {
        "Name": "SiteSpecifiedEvents",
          "ExecutablePath": "applications/performRegionalMapping/SiteSpecifiedEvents/SSE.py",
  "RunsParallel": true,   
        "ApplicationSpecificInputs": [
          {
            "id": "filenameEVENTgrid",
            "type": "path",
            "description": "Path to file containing location information on each event file"
          }
        ]
      }
    ]
  },
  "EventApplications": {
    "API": {
      "Inputs": [
      {
          "id": "filenameAIM",
          "type": "workflowDefault",
          "description": "name of AIM file"
      }
      ],
      "Outputs": [
      {
          "id": "filenameEVENT",
          "type": "workflowDefault",
          "description": "name of file containing the event data"
      }
      ]
    },
    "Applications": [
      {
        "Name": "ExistingSimCenterEvents",
        "ExecutablePath": "applications/createEVENT/multipleSimCenter/MultipleSCEvents",
        "ApplicationSpecificInputs": [
  ]
      },
    {
        "Name": "PhysicsBasedMotion",
        "ExecutablePath": "applications/createEVENT/physicsBasedMotion/PhysicsBasedMotion",
        "ApplicationSpecificInputs": [
  ]
      },	
      {
        "Name": "ExistingPEER_Events",
        "ExecutablePath": "applications/createEVENT/multiplePEER/MultiplePEER",
        "ApplicationSpecificInputs": [
  ]
      },
      {
        "Name": "Site Response",
        "ExecutablePath": "applications/createEVENT/siteResponse/SiteResponse.py",
        "ApplicationSpecificInputs": [
  ]
      },
      {
        "Name": "RegionalSiteResponse",
        "ExecutablePath": "applications/createEVENT/siteResponse/RegionalSiteResponse.py",
        "ApplicationSpecificInputs": [
          {
            "id": "pathEventData",
            "type": "path",
            "description": "Path to directory containing event data files in SimCenter format"
          },
          {
            "id": "modelPath",
            "type": "path",
            "description": "Defines the location of the OpenSees tcl model files."
          },
          {
            "id": "mainScript",
            "type": "string",
            "description": "Defines the name of the main model file."
          },
          {
            "id": "ndm",
            "type": "int",
            "description": "Defines the number of degrees of freedom in the numerical model."
          }
        ]
      },
      {
        "Name": "HazardBasedEvent",
        "ExecutablePath": "applications/createEVENT/hazardBasedEvent/HazardBasedEvent.py",
        "ApplicationSpecificInputs":[]
      },
      {
        "Name": "DEDM_HRP",
        "ExecutablePath": "applications/createEVENT/DEDM_HRP/DEDM_HRP.py",
        "ApplicationSpecificInputs":[]
      },
      {
        "Name": "LowRiseTPU",
        "ExecutablePath": "applications/createEVENT/LowRiseTPU/LowRiseTPU",
        "ApplicationSpecificInputs":[]
      },
      {
        "Name": "HighRiseTPU",
        "ExecutablePath": "applications/createEVENT/HighRiseTPU/HighRiseTPU",
        "ApplicationSpecificInputs":[]
      },  
      {
        "Name": "WindTunnelExperiment",
        "ExecutablePath": "applications/createEVENT/windTunnelExperiment/WindTunnelExperiment",
        "ApplicationSpecificInputs":[]
      },
      {
        "Name": "StochasticWindWittigSinha",
        "ExecutablePath": "applications/createEVENT/stochasticWind/StochasticWind",
        "ApplicationSpecificInputs":[]
      },
      {
        "Name": "StochasticGroundMotion",
        "ExecutablePath": "applications/createEVENT/stochasticGroundMotion/StochasticGM",
        "ApplicationSpecificInputs":[
          {
            "id": "modelName",
            "type": "string",
            "description": "..."
          },
          {
            "id": "seed",
            "type": "int",
            "description": "..."
          }
        ]
      },
  {
            "Name": "CFDEvent",
            "ExecutablePath": "applications/createEVENT/CFDEvent/CFDEvent.py",
            "ApplicationSpecificInputs":[
        {
      "id":"OpenFOAMCase",
      "type":"string",
      "description": "Remote directory containing OpenFOAM case input"
        },
    {
        "id":"OpenFOAMSolver",
        "type":"string",
        "description": "OpenFOAM solver used"
    }]
        },
      {
        "Name": "IsolatedBuildingCFD",
        "ExecutablePath": "applications/createEVENT/isolatedBuildingCFD/IsolatedBuildingCFD.py",
        "ApplicationSpecificInputs":[
        ]
      },
      {
        "Name": "CoupledDigitalTwin",
        "ExecutablePath": "applications/createEVENT/coupledDigitalTwin/CoupledDigitalTwin.py",
        "ApplicationSpecificInputs":[
        ]
      },  
      {
        "Name": "MPM",
        "ExecutablePath": "applications/createEVENT/MPM/MPM.py",
        "ApplicationSpecificInputs":[
          {
            "id":"publicDirectory",
            "type":"string",
            "description": "Remote directory hosting ClaymoreUW MPM assets (e.g. geometries, checkpoints, motion-paths) for the application for any user to access on the HPC system."
          }
        ]
      },
      {
        "Name": "StochasticWaveJonswap",
        "ExecutablePath": "applications/createEVENT/stochasticWave/StochasticWave.py",
        "ApplicationSpecificInputs":[]
      },  
      {
        "Name": "GeoClawOpenFOAM",
        "ExecutablePath": "applications/createEVENT/GeoClawOpenFOAM/GeoClawOpenFOAM.py",
        "ApplicationSpecificInputs":[
    {
      "id":"OpenFOAMCase",
      "type":"string",
            "description": "Remote directory containing OpenFOAM case input"
    },{
      "id":"OpenFOAMSolver",
      "type":"string",
            "description": "OpenFOAM solver used"
    }]
      },
      {
        "Name": "NNGM",
        "ExecutablePath": "applications/createEVENT/NNGM/NNGM.py",
        "ApplicationSpecificInputs": [
          {
            "id": "groundMotions",
            "type": "path",
            "description": "Configuration file with information about the ground motions to use"
          },
          {
            "id": "recordsFolder",
            "type": "path",
            "description": "Folder containing records"
          }
        ]
      },
      {
        "Name": "LLNL-SW4",
        "ExecutablePath": "applications/createEVENT/LLNL_SW4/LLNL_SW4.py",
        "ApplicationSpecificInputs": [
          {
            "id": "pathSW4results",
            "type": "path",
            "description": "Path to directory containig output point files"
          }
        ]
      },
      {
        "Name": "SimCenterEvent",
        "ExecutablePath": "applications/createEVENT/SimCenterEvent/SimCenterEvent.py",
        "ApplicationSpecificInputs": [
          {
            "id": "inputUnit",
            "type": "string",
            "description": "Units of the data in the input file"
          }
        ]
      },
      {
        "Name": "ASCE7_WindSpeed",
        "ExecutablePath": "applications/createEVENT/ASCE7_WindSpeed/ASCE7_WindSpeed.py",
        "ApplicationSpecificInputs":[]
      },
      {
        "Name": "pointWindSpeed",
        "ExecutablePath": "applications/createEVENT/pointWindSpeed/pointWindSpeed",
        "ApplicationSpecificInputs":["filenameWindSpeedCloudData"]
      },
      {
        "Name": "gridGroundMoionSelection",
        "ExecutablePath": "applications/createEVENT/uniformPEER/gridGroundMoion.py"
      },
      {
        "Name": "ExperimentalWindForces",
        "ExecutablePath": "applications/createEVENT/experimentalWindForces/experimentalWindForces.py"
      },
      {
        "Name": "ExperimentalWindPressures",
        "ExecutablePath": "applications/createEVENT/experimentalWindPressures/experimentalWindPressures.py"
      },
      {
        "Name": "WindForceSpectrum",
        "ExecutablePath": "applications/createEVENT/experimentalWindForces/experimentalWindForces.py"
      }
    ]
  },
  "ModelingApplications": {
    "API": {
      "Inputs": [
      {
          "id": "filenameAIM",
          "type": "workflowDefault",
          "description": "name of AIM file"
      },
      {
          "id": "filenameEVENT",
          "type": "workflowDefault",
          "description": "name of file containing the event data"
      }
      ],
      "Outputs": [
      {
          "id": "filenameSAM",
          "type": "workflowDefault",
          "description": "name of file containing the outputted SAM"
      }
      ]
    },
    "Applications": [
      {
        "Name": "MDOF-LU",
        "ExecutablePath": "applications/createSAM/MDOF-LU/MDOF-LU",
        "ApplicationSpecificInputs": [
          {
            "id": "hazusData",
            "type": "path",
            "description": "Defines the location of the hazus building config data file."
          },
          {
            "id": "stdStiffness",
            "type": "float",
            "description": "Defines the standard deviation that should be considered when sampling the stiffness for the building."
          },
          {
            "id": "stdDamping",
            "type": "float",
            "description": "Defines the standard deviation that should be considered when sampling the damping ratio for the building."
          }
        ]
      },
      {
        "Name": "OpenSeesInput",
        "ExecutablePath": "applications/createSAM/openSeesInput/OpenSeesInput",
        "ApplicationSpecificInputs": [
          {
            "id": "fileName",
            "type": "string",
            "description": "Defines the name of the main OpenSees model file."
          },
          {
            "id": "filePath",
            "type": "string",
            "description": "Defines the location of the main OpenSees model file."
          }
        ]
      },
      {
        "Name": "CustomPyInput",
        "ExecutablePath": "applications/createSAM/customPyInput/customPyInput.py",
        "ApplicationSpecificInputs": [
          {
            "id": "mainScript",
            "type": "string",
            "description": "Defines the name of the main model file."
          },
          {
            "id": "modelPath",
            "type": "string",
            "description": "Defines the location of the OpenSeesPy model files."
          },
          {
            "id": "ndm",
            "type": "int",
            "description": "Defines the number of degrees of freedom in the numerical model."
          },
          {
            "id": "dofMap",
            "type": "string",
            "description": "The workflow assumes X=1, Y=2, Z=3 mapping between directions and degrees of freedom; XY being the horizontal directions. This input allows you to define an alternative mapping by providing three numbers separated by commas in a string, such as '1, 3, 2' if you want to have Y as the vertical direction."
          },
          {
            "id": "columnLine",
            "type": "string",
            "description": "Defines the ids of the nodes that shall be used for EDP calculations. Only the firsts n+1 nodes will be used for an n-story building."
          }
        ]
      },
      {
        "Name": "OpenSeesPyInput",
        "ExecutablePath": "applications/createSAM/openSeesPyInput/OpenSeesPyInput.py",
        "ApplicationSpecificInputs": [
          {
            "id": "modelPath",
            "type": "path",
            "description": "Defines the location of the OpenSeesPy model files."
          },
          {
            "id": "mainScript",
            "type": "string",
            "description": "Defines the name of the main model file."
          },
          {
            "id": "ndm",
            "type": "int",
            "description": "Defines the number of degrees of freedom in the numerical model."
          },
          {
            "id": "dofMap",
            "type": "string",
            "description": "The workflow assumes X=1, Y=2, Z=3 mapping between directions and degrees of freedom; XY being the horizontal directions. This input allows you to define an alternative mapping by providing three numbers separated by commas in a string, such as '1, 3, 2' if you want to have Y as the vertical direction."
          },
          {
            "id": "columnLine",
            "type": "string",
            "description": "Defines the ids of the nodes that shall be used for EDP calculations. Only the firsts n+1 nodes will be used for an n-story building."
          }
        ]
      },
      {
        "Name": "MDOF_BuildingModel",
        "ExecutablePath": "applications/createSAM/mdofBuildingModel/MDOF_BuildingModel",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "MultiModel",
        "ExecutablePath": "applications/Workflow/MultiModelApplication.py",
          "ApplicationSpecificInputs": [
              {"id": "appKey",
               "type": "string",
               "description": "keyword of application data in input file"
        }
    ]
      },
      {
        "Name": "SteelBuildingModel",
        "ExecutablePath": "applications/createSAM/AutoSDA/main_program.py",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "ConcreteBuildingModel",
        "ExecutablePath": "applications/createSAM/RCFIAP/RC_FIAP_main.py",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "SurrogateGPBuildingModel",
        "ExecutablePath": "applications/createSAM/surrogateGP/SurrogateGP.py"
      },
      {
        "Name": "MultiModel-SIM",
        "ExecutablePath": "applications/createSAM/multimodel/multipleSIMs.py",
        "ApplicationSpecificInputs": []
      }
    ]
  },
  "EDPApplications": {
    "API": {
      "Inputs": [
      {
          "id": "filenameAIM",
          "type": "workflowDefault",
          "description": "name of AIM file"
      },
      {
          "id": "filenameEVENT",
          "type": "workflowDefault",
          "description": "name of file containing the event data"
      },
      {
          "id": "filenameSAM",
          "type": "workflowDefault",
          "description": "name of file containing the SAM"
      }
      ],
      "Outputs": [
      {
          "id": "filenameEDP",
          "type": "workflowDefault",
    "description": "name of file containing the EDP to be determined from the analysis"
      }
      ]
    },
    "Applications": [
      {
        "Name": "StandardEarthquakeEDP",
        "ExecutablePath": "applications/createEDP/standardEarthquakeEDP/StandardEQEDP",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "StandardEarthquakeEDP_R",
        "ExecutablePath": "applications/createEDP/standardEarthquakeEDP_R/StandardEarthquakeEDP",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "StandardWindEDP",
        "ExecutablePath": "applications/createEDP/standardWindEDP/StandardWindEDP",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "StandardEDP",
        "ExecutablePath": "applications/createEDP/standardEDP/StandardEDP",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "DummyEDP",
        "ExecutablePath": "applications/createEDP/dummyEDP/DummyEDP",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "StandardGMT_EDP",
        "ExecutablePath": "applications/createEDP/gmtEDP/StandardGMT_EDP",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "UserDefinedEDP",
        "ExecutablePath": "applications/createEDP/userEDP/UserDefinedEDP",
        "ApplicationSpecificInputs": [
          {
            "id": "EDPPath",
            "type": "path",
            "description": "Identifies the location of where the txt files with requested EDPs are stored."
          }
        ]
      },
      {
        "Name": "UserDefinedEDP_R",
        "ExecutablePath": "applications/createEDP/userEDP_R/UserDefinedEDP.py",
        "ApplicationSpecificInputs": [
          {
            "id": "EDPspecs",
            "type": "path",
            "description": "Identifies the location of a json file that specifies the requested EDPs."
          }
        ]
      },
      {
        "Name": "SimpleEDP",
        "ExecutablePath": "applications/createEDP/simpleEDP/simpleEDP.py",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "SurrogateEDP",
        "ExecutablePath": "applications/createEDP/surrogateEDP/surrogateEDP.py",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "StandardHydroEDP",
        "ExecutablePath": "applications/createEDP/standardHydroEDP/StandardHydroEDP",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "StandardTsunamiEDP",
        "ExecutablePath": "applications/createEDP/standardTsunamiEDP/StandardTsunamiEDP",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "StandardStormSurgeEDP",
        "ExecutablePath": "applications/createEDP/standardStormSurgeEDP/StandardStormSurgeEDP",
        "ApplicationSpecificInputs": []
      }
    ]
  },
  "SimulationApplications": {
    "API": {
      "Inputs": [
      {
          "id": "filenameAIM",
          "type": "workflowDefault",
          "description": "name of file containing the AIM"
      },
      {
          "id": "filenameSAM",
          "type": "workflowDefault",
          "description": "name of file containing the SAM"
      },
      {
          "id": "filenameEVENT",
          "type": "workflowDefault",
          "description": "name of file containing the event data"
      }
      ],
      "Outputs": [
      {
          "id": "filenameEDP",
          "type": "workflowDefault",
          "description": "name of EDP file to be added to"
      },
      {
          "id": "filenameSIM",
          "type": "workflowDefault",
          "description": "name of SIM file to be added to"
      }
      ]
    },
    "Applications": [
      {
        "Name": "OpenSees-Simulation",
        "ExecutablePath": "applications/performSIMULATION/openSees/OpenSeesSimulation.py"
      },
      {
        "Name": "OpenSeesPy-Simulation",
        "ExecutablePath": "applications/performSIMULATION/openSeesPy/OpenSeesPySimulation.py"
      },
      {
        "Name": "CustomPy-Simulation",
        "ExecutablePath": "applications/performSIMULATION/customPy/customPySimulation.py"
      },
      {
        "Name": "ExtractPGA",
        "ExecutablePath": "applications/performSIMULATION/extractPGA/ExtractPGA"
      },
      {
        "Name": "MultiModel",
        "ExecutablePath": "applications/Workflow/MultiModelApplication.py",
          "ApplicationSpecificInputs": [
              {"id": "appKey",
               "type": "string",
               "description": "keyword of application data in input file"
        }
    ]
      },  
      {
        "Name": "OpenSees-Simulation_R",
        "ExecutablePath": "applications/performSIMULATION/openSees_R/OpenSeesSimulation.py"
      },
      {
        "Name": "IMasEDP",
        "ExecutablePath": "applications/performSIMULATION/IMasEDP/IMasEDP.py"
      },
      {
        "Name": "SurrogateSimulation",
        "ExecutablePath": "applications/performSIMULATION/surrogateSimulation/SurrogateSimulation.py"
      },
      {
        "Name": "SurrogateRegionalPy",
        "ExecutablePath": "applications/performSIMULATION/surrogateRegionalPy/SurrogateRegionalPy.py"
      },
      {
        "Name": "MultiModel-FEA",
        "ExecutablePath": "applications/performSIMULATION/multimodel/multipleSimulations.py"
      }
    ]
  },
  "UQApplications": {
      "API": {
    "Inputs": [
        {
      "id": "workflowInput",
      "type": "workflowDefault",
      "description": "name of input file"
        },
        {
      "id": "driverFile",
      "type": "workflowDefault",
      "description": "name of file containing the simulation driver"
        }
    ],
    "Outputs": [
        {
      "id": "workflowOutput",
      "type": "workflowDefault",
      "description": "name of EDP file to be added to"
        }
    ]
    },
    "Applications": [
      {
        "Name": "Dakota-UQ",
        "ExecutablePath": "applications/performUQ/dakota/DakotaUQ.py"
      },
      {
        "Name": "SimCenter-UQ",
        "ExecutablePath": "applications/performUQ/SimCenterUQ/SimCenterUQ.py"
      },
      {
        "Name": "UCSD-UQ",
        "ExecutablePath": "applications/performUQ/UCSD_UQ/UCSD_UQ.py"
      },    
      {
        "Name": "UQpy",
        "ExecutablePath": "applications/performUQ/UQpy/UQpyEngine.py"
      },    
      {
        "Name": "Dakota-FEM",
        "ExecutablePath": "applications/performUQ/dakota_R/DakotaFEM.py"
      },{
        "Name": "Dakota-UQ1",
        "ExecutablePath": "applications/performUQ/dakota/DakotaFEM1.py"
      },
      {
        "Name": "CustomUQ",
        "ExecutablePath": "applications/performUQ/other/runOtherUQ.py"
      }
    ]
  },
  "FEMApplications": {
    "API": {
      "Inputs": [
      {
          "id": "workflowInput",
          "type": "workflowDefault",
          "description": "name of file containing the input"
      }
      ],
      "Outputs": [
      {
          "id": "driverFile",
          "type": "workflowDefault",
          "description": "name of output file"
      }
      ]
    },
    "Applications": [
      {
        "Name": "OpenSees",
        "ExecutablePath": "applications/performFEM/OpenSees/createOpenSeesDriver",
         "ApplicationSpecificInputs": [
        ]
      },
      {
        "Name": "OpenSeesPy",
        "ExecutablePath": "applications/performFEM/OpenSeesPy/createOpenSeesPyDriver",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "SurrogateGP",
        "ExecutablePath": "applications/performFEM/surrogateGP/createGpDriver",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "FEAPpv",
        "ExecutablePath": "applications/performFEM/feappv/createFeapDriver",
        "ApplicationSpecificInputs": []
      },
      {
        "Name": "MultiModel",
        "ExecutablePath": "applications/Workflow/MultiModelDriver.py",
        "ApplicationSpecificInputs": []
      } ,
      {
        "Name": "Custom",
        "ExecutablePath": "applications/performFEM/Custom/createCustomDriver",
        "ApplicationSpecificInputs": []
      } 
    ]
  },    
  "DLApplications": {
    "API": {
      "Inputs": [
      {
          "id": "filenameDL",
          "type": "workflowDefault",
          "description": "name of file containing the DL model information"
      },
      {
          "id": "demandFile",
          "type": "string",
          "description": "name of file containing the EDP data",
          "default": "response.csv"
      }
      ],
      "Outputs": [
      ]
    },
    "Applications": [      
      {
        "Name": "Pelicun3",
        "ExecutablePath": "applications/performDL/pelicun3/pelicun3_wrapper.py",
        "ApplicationSpecificInputs": [
          {
            "id": "Realizations",
            "type": "int",
            "description": "Specifies the number of realizations to generate"
          },
          {
            "id": "detailed_results",
            "type": "bool",
            "description": "If false, only the main results are saved to improve performance."
          },
          {
            "id": "log_file",
            "type": "bool",
            "description": "If false, pelicun does not create a log file."
          },
          {
            "id": "coupled_EDP",
            "type": "bool",
            "description": "If true, the raw EDPs are used as-is without re-sampling."
          },
          {
            "id": "event_time",
            "type": "string",
            "description": "Defines the time of the event in YYYY-MM-DD:HH format. 'off' turns all time-effects off."
          },
          {
            "id": "ground_failure",
            "type": "bool",
            "description": "If true, fragility groups associated with ground failure are added in the auto-population phase. Note that such analysis requires PGD values as inputs."
          },
          {
            "id": "auto_script",
            "type": "path",
            "description": "Identifies the location of a python script that can be used to auto-populate the loss model."
          },
          {
            "id": "custom_model_dir",
            "type": "path",
            "description": "Identifies the location of user-provided custom damage and loss models."
          },
          {
            "id": "regional",
            "type": "bool",
            "description": "If yes, the analysis is part of a regional simulation and results will be aggregated."
          }
        ]
      },
      {
        "Name": "CBCitiesDL",
        "ExecutablePath": "applications/performDL/CBCities/CBCitiesWDNDL.py",
        "ApplicationSpecificInputs": [
        ]
      }
    ]
  },
    "SystemPerformanceApplications":{
	"API": {
	    "Inputs": [
	    ],
	    "Outputs": [
	    ]
	},
	"Applications": [
	    {
		"Name": "REWETRecovery",
		"ExecutablePath": "applications/systemPerformance/REWEt/REWET_Wrapper.py",
		"ApplicationSpecificInputs": [		    
		]
	    }
	]
    },
  "PerformanceApplications": {
    "API": {
      "Inputs": [
      ],
      "Outputs": [
      ]
    },
    "Applications": [
      {
        "Name": "REDi",
        "ExecutablePath": "applications/performanceAssessment/REDi/REDiWrapper.py",
        "ApplicationSpecificInputs": [
          {
            "id": "dirnameOutput",
            "type": "string",
            "description": "Path to the working directory containing the Pelicun results."
          },
          {
            "id": "riskParametersPath",
            "type": "string",
            "description": "Path to the risk parameters json file ."
          }
        ]
      }
    ]
  }
}
